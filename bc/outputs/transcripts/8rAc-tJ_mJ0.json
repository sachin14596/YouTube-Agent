{"text": " Database profiling is critical for finding bottlenecks or other issues that might be degrading the user experience. In this episode, we're going to look at the built in Firebase Profiler tool, which will give us a breakdown of the memory and speed performance of our database. This tutorial is done in the context of an Angular application, but it can just as easily be applied to the Firebase JavaScript SDK. If you're just getting started with Firebase, you'll need to install the Firebase Tools command line interface and then initialize your project by running Firebase init. To demonstrate this feature, we're going to read and write a bunch of weather data in the Firebase database, which I've acquired here from the dark sky API. So I went ahead and parsed this JSON into JavaScript, and then I'm importing it in an Angular component here. When we save the data to Firebase, it's going to look like this, a big object with its own nested objects and arrays, not something you would consider optimized for efficiency in a no-sequel database. Then back in the Angular component, I'm going to create an observable stopwatch, which will help us determine the actual latency the user sees on the front end. So we can start the stopwatch as soon as we make a request, and then as soon as Firebase returns this actual object, we'll stop the stopwatch, and then I'll display that number in milliseconds on the front end. We can do this in our xjs by creating an observable interval that ticks every one millisecond, and to finish the stopwatch, we just call unsubscribe on it. Then going down into the Angular component, we can just create a new instance of the stopwatch.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.5, "text": " Database profiling is critical for finding bottlenecks or other issues that might be degrading", "tokens": [50364, 40461, 651, 1740, 4883, 307, 4924, 337, 5006, 44641, 2761, 420, 661, 2663, 300, 1062, 312, 24740, 278, 50639], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 1, "seek": 0, "start": 5.5, "end": 7.34, "text": " the user experience.", "tokens": [50639, 264, 4195, 1752, 13, 50731], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 2, "seek": 0, "start": 7.34, "end": 11.14, "text": " In this episode, we're going to look at the built in Firebase Profiler tool, which will", "tokens": [50731, 682, 341, 3500, 11, 321, 434, 516, 281, 574, 412, 264, 3094, 294, 35173, 6039, 5441, 2290, 11, 597, 486, 50921], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 3, "seek": 0, "start": 11.14, "end": 15.540000000000001, "text": " give us a breakdown of the memory and speed performance of our database.", "tokens": [50921, 976, 505, 257, 18188, 295, 264, 4675, 293, 3073, 3389, 295, 527, 8149, 13, 51141], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 4, "seek": 0, "start": 15.540000000000001, "end": 19.3, "text": " This tutorial is done in the context of an Angular application, but it can just as easily", "tokens": [51141, 639, 7073, 307, 1096, 294, 264, 4319, 295, 364, 34107, 3861, 11, 457, 309, 393, 445, 382, 3612, 51329], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 5, "seek": 0, "start": 19.3, "end": 23.06, "text": " be applied to the Firebase JavaScript SDK.", "tokens": [51329, 312, 6456, 281, 264, 35173, 15778, 37135, 13, 51517], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 6, "seek": 0, "start": 23.06, "end": 26.98, "text": " If you're just getting started with Firebase, you'll need to install the Firebase Tools", "tokens": [51517, 759, 291, 434, 445, 1242, 1409, 365, 35173, 11, 291, 603, 643, 281, 3625, 264, 35173, 30302, 51713], "temperature": 0.0, "avg_logprob": -0.18411996260933253, "compression_ratio": 1.6295081967213114, "no_speech_prob": 0.00857891608029604}, {"id": 7, "seek": 2698, "start": 26.98, "end": 33.34, "text": " command line interface and then initialize your project by running Firebase init.", "tokens": [50364, 5622, 1622, 9226, 293, 550, 5883, 1125, 428, 1716, 538, 2614, 35173, 3157, 13, 50682], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 8, "seek": 2698, "start": 33.34, "end": 36.6, "text": " To demonstrate this feature, we're going to read and write a bunch of weather data in", "tokens": [50682, 1407, 11698, 341, 4111, 11, 321, 434, 516, 281, 1401, 293, 2464, 257, 3840, 295, 5503, 1412, 294, 50845], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 9, "seek": 2698, "start": 36.6, "end": 41.22, "text": " the Firebase database, which I've acquired here from the dark sky API.", "tokens": [50845, 264, 35173, 8149, 11, 597, 286, 600, 17554, 510, 490, 264, 2877, 5443, 9362, 13, 51076], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 10, "seek": 2698, "start": 41.22, "end": 45.94, "text": " So I went ahead and parsed this JSON into JavaScript, and then I'm importing it in an Angular", "tokens": [51076, 407, 286, 1437, 2286, 293, 21156, 292, 341, 31828, 666, 15778, 11, 293, 550, 286, 478, 43866, 309, 294, 364, 34107, 51312], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 11, "seek": 2698, "start": 45.94, "end": 47.46, "text": " component here.", "tokens": [51312, 6542, 510, 13, 51388], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 12, "seek": 2698, "start": 47.46, "end": 51.22, "text": " When we save the data to Firebase, it's going to look like this, a big object with its", "tokens": [51388, 1133, 321, 3155, 264, 1412, 281, 35173, 11, 309, 311, 516, 281, 574, 411, 341, 11, 257, 955, 2657, 365, 1080, 51576], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 13, "seek": 2698, "start": 51.22, "end": 55.46, "text": " own nested objects and arrays, not something you would consider optimized for efficiency", "tokens": [51576, 1065, 15646, 292, 6565, 293, 41011, 11, 406, 746, 291, 576, 1949, 26941, 337, 10493, 51788], "temperature": 0.0, "avg_logprob": -0.15364093315310595, "compression_ratio": 1.6426332288401253, "no_speech_prob": 0.005506070330739021}, {"id": 14, "seek": 5546, "start": 55.46, "end": 58.26, "text": " in a no-sequel database.", "tokens": [50364, 294, 257, 572, 12, 11834, 338, 8149, 13, 50504], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 15, "seek": 5546, "start": 58.26, "end": 62.620000000000005, "text": " Then back in the Angular component, I'm going to create an observable stopwatch, which", "tokens": [50504, 1396, 646, 294, 264, 34107, 6542, 11, 286, 478, 516, 281, 1884, 364, 9951, 712, 1590, 15219, 11, 597, 50722], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 16, "seek": 5546, "start": 62.620000000000005, "end": 66.9, "text": " will help us determine the actual latency the user sees on the front end.", "tokens": [50722, 486, 854, 505, 6997, 264, 3539, 27043, 264, 4195, 8194, 322, 264, 1868, 917, 13, 50936], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 17, "seek": 5546, "start": 66.9, "end": 70.54, "text": " So we can start the stopwatch as soon as we make a request, and then as soon as Firebase", "tokens": [50936, 407, 321, 393, 722, 264, 1590, 15219, 382, 2321, 382, 321, 652, 257, 5308, 11, 293, 550, 382, 2321, 382, 35173, 51118], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 18, "seek": 5546, "start": 70.54, "end": 74.86, "text": " returns this actual object, we'll stop the stopwatch, and then I'll display that number", "tokens": [51118, 11247, 341, 3539, 2657, 11, 321, 603, 1590, 264, 1590, 15219, 11, 293, 550, 286, 603, 4674, 300, 1230, 51334], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 19, "seek": 5546, "start": 74.86, "end": 76.94, "text": " in milliseconds on the front end.", "tokens": [51334, 294, 34184, 322, 264, 1868, 917, 13, 51438], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 20, "seek": 5546, "start": 76.94, "end": 81.94, "text": " We can do this in our xjs by creating an observable interval that ticks every one millisecond,", "tokens": [51438, 492, 393, 360, 341, 294, 527, 2031, 25530, 538, 4084, 364, 9951, 712, 15035, 300, 42475, 633, 472, 27940, 18882, 11, 51688], "temperature": 0.0, "avg_logprob": -0.17363281855507504, "compression_ratio": 1.7854545454545454, "no_speech_prob": 0.007506229914724827}, {"id": 21, "seek": 8194, "start": 81.94, "end": 85.94, "text": " and to finish the stopwatch, we just call unsubscribe on it.", "tokens": [50364, 293, 281, 2413, 264, 1590, 15219, 11, 321, 445, 818, 2693, 9493, 322, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2457669803074428, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.09166938811540604}, {"id": 22, "seek": 8194, "start": 85.94, "end": 89.74, "text": " Then going down into the Angular component, we can just create a new instance of the", "tokens": [50564, 1396, 516, 760, 666, 264, 34107, 6542, 11, 321, 393, 445, 1884, 257, 777, 5197, 295, 264, 50754], "temperature": 0.0, "avg_logprob": -0.2457669803074428, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.09166938811540604}, {"id": 23, "seek": 8194, "start": 89.74, "end": 89.98, "text": " stopwatch.", "tokens": [50754, 1590, 15219, 13, 50766], "temperature": 0.0, "avg_logprob": -0.2457669803074428, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.09166938811540604}], "language": "en"}